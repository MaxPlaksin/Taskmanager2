#!/usr/bin/env python3
"""
Webhook –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ GitHub
–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –∏ —Å–ª—É—à–∞–µ—Ç POST –∑–∞–ø—Ä–æ—Å—ã –æ—Ç GitHub
"""

from flask import Flask, request, jsonify
import subprocess
import os
import hmac
import hashlib
import json

app = Flask(__name__)

# –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏ GitHub webhook
WEBHOOK_SECRET = os.environ.get('WEBHOOK_SECRET', 'your-secret-key-here')

# –ü—É—Ç—å –∫ —Å–∫—Ä–∏–ø—Ç—É —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
DEPLOY_SCRIPT = '/path/to/your/project/Taskmanager2/deploy.sh'

def verify_signature(payload, signature):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å—å GitHub webhook"""
    if not signature:
        return False
    
    # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å 'sha256='
    signature = signature.replace('sha256=', '')
    
    # –°–æ–∑–¥–∞–µ–º –æ–∂–∏–¥–∞–µ–º—É—é –ø–æ–¥–ø–∏—Å—å
    expected_signature = hmac.new(
        WEBHOOK_SECRET.encode('utf-8'),
        payload,
        hashlib.sha256
    ).hexdigest()
    
    return hmac.compare_digest(signature, expected_signature)

@app.route('/webhook', methods=['POST'])
def webhook():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ GitHub webhook"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å—å –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        signature = request.headers.get('X-Hub-Signature-256')
        
        # –ü–æ–ª—É—á–∞–µ–º payload
        payload = request.get_data()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å
        if not verify_signature(payload, signature):
            print("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å webhook")
            return jsonify({'error': 'Unauthorized'}), 401
        
        # –ü–∞—Ä—Å–∏–º JSON
        data = json.loads(payload)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ push –≤ main –≤–µ—Ç–∫—É
        if (data.get('ref') == 'refs/heads/main' and 
            data.get('repository', {}).get('name') == 'Taskmanager2'):
            
            print("üîÑ –ü–æ–ª—É—á–µ–Ω push –≤ main –≤–µ—Ç–∫—É, –∑–∞–ø—É—Å–∫–∞–µ–º —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
            result = subprocess.run(
                ['bash', DEPLOY_SCRIPT],
                capture_output=True,
                text=True,
                timeout=300  # 5 –º–∏–Ω—É—Ç —Ç–∞–π–º–∞—É—Ç
            )
            
            if result.returncode == 0:
                print("‚úÖ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
                return jsonify({
                    'status': 'success',
                    'message': 'Deployment completed successfully',
                    'output': result.stdout
                })
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è: {result.stderr}")
                return jsonify({
                    'status': 'error',
                    'message': 'Deployment failed',
                    'error': result.stderr
                }), 500
        else:
            print("‚ÑπÔ∏è Push –Ω–µ –≤ main –≤–µ—Ç–∫—É, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ")
            return jsonify({'status': 'ignored', 'message': 'Not a main branch push'})
            
    except subprocess.TimeoutExpired:
        print("‚è∞ –¢–∞–π–º–∞—É—Ç —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è")
        return jsonify({'status': 'error', 'message': 'Deployment timeout'}), 500
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ webhook: {str(e)}}")
        return jsonify({'status': 'error', 'message': str(e)}), 500

@app.route('/health', methods=['GET'])
def health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è webhook —Å–µ—Ä–≤–∏—Å–∞"""
    return jsonify({'status': 'healthy', 'service': 'deployment-webhook'})

if __name__ == '__main__':
    print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º webhook —Å–µ—Ä–≤–µ—Ä...")
    print(f"üì° –°–ª—É—à–∞–µ–º –Ω–∞ –ø–æ—Ä—Ç—É 5002")
    print(f"üîó Webhook URL: http://your-server:5002/webhook")
    app.run(host='0.0.0.0', port=5002, debug=False)
